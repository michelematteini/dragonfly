shader: SimplexNoise;
using SimplexNoiseBase;

#define SIMPLEX_MUL 106.0

// frequency correction to make simplex visually match other noises better 
// and change its tiling frequency to a power of 2 coordinate
#define SIMPLEX_FREQ_CORRECTION 0.75 

/// <summary>
/// Calculate simplex noise value and partial derivatives along the 3 axes.
/// </summary>
/// <param name="p">3D position at which the noise value is calculated.</param>
/// <returns>A float4 containing (ddx, ddy, ddz, noise value). The noise value is in the [-1, 1] range.</returns>
float4 SimplexNoiseDDX(float3 p, float2 texelOffset)
{
    float3 dp0, dp1, dp2, dp3;
    float3 n0, n1, n2, n3;
    CalcSimplexLattice(p, texelOffset, dp0, dp1, dp2, dp3, n0, n1, n2, n3);
    
    // calc gradient contribution factor m for each vertex	
    float4 m = max(0, 0.5 - float4(dot(dp0, dp0), dot(dp1, dp1), dot(dp2, dp2), dot(dp3, dp3)));
    float4 m2 = m * m;
    float4 m3 = m2 * m;
    float4 m4 = m2 * m2;

    float4 result;
    
    // calc simplex noise value
    float4 ndotdp = float4(dot(n0, dp0), dot(n1, dp1), dot(n2, dp2), dot(n3, dp3));
    result.w = dot(m4, ndotdp);

    // calc simplex noise derivatives
    float4 m3ndotdp = m3 * ndotdp;
    result.xyz = -8.0 * basemul(m3ndotdp, dp0, dp1, dp2, dp3);
    result.xyz += basemul(m4, n0, n1, n2, n3);

    // return normalized values
    return SIMPLEX_MUL * result;
}

/// <summary>
/// Calculate a noise octave with the specified frequency and amplitude.
/// </summary>
/// <param name="coords">Sample location</param>
/// <param name="ampliture">Maximum value (scale) of this octave.</param>
/// <param name="frequency">Octave frequency, its multiplied to the specified coords while sampling.</param>
/// <returns>A value in the [0, amplitude] range.</returns>
float4 SimplexNoiseOctaveDDX(float3 coords, float amplitude, float frequency, float2 texelOffset)
{
    float f0 = frequency * SIMPLEX_FREQ_CORRECTION;
    float4 noise = SimplexNoiseDDX(coords * f0, texelOffset);
    noise.w = 0.5 * (noise.w + 1.0) * amplitude;
    float ddxMul = 0.5 * amplitude * f0;
    noise.xyz *= ddxMul;
    return noise;
}


float4 SimplexNoiseDistributionDDX(float3 position, float4 distr, float2 texelOffset)
{
    float amplitude = GetDistrAmplitude(distr);
    int endOctave = GetDistrEndOctave(distr);

    // accumulate octaves
    float4 result = 0;
    [loop] for (int i = GetDistrStartOctave(distr); i <= endOctave; i++)
    {
        float freq = OctaveToCoordMul(i);
        float4 noise = SimplexNoiseOctaveDDX(position, amplitude, freq, texelOffset + i);
        result += noise;
        amplitude *= GetDistrAmplMul(distr);
    }

    return result;
}


float4 SimplexNoiseWorldDistributionDDX(float3 worldPos, int3 worldTile, float4 distr, float2 texelOffset)
{
    float amplitude = GetDistrAmplitude(distr);
    int endOctave = GetDistrEndOctave(distr);

    // accumulate octaves
    float4 result = (float4)0;
    [loop] for (int i = GetDistrStartOctave(distr); i <= endOctave; i++)
    {
        float freq = OctaveToCoordMul(i);
        float3 worldCoords = CalcWorldCoords(worldPos, worldTile, texelSize(randomLut).x * 0.25, freq);
        float4 noise = SimplexNoiseDDX(worldCoords * SIMPLEX_FREQ_CORRECTION, texelOffset + i);
        float mul = 0.5 * amplitude;
        noise.w = (noise.w + 1.0) * mul;
        float ddxmul = mul * freq * SIMPLEX_FREQ_CORRECTION;
        noise.xyz *= ddxmul;
        result += noise;
        amplitude *= GetDistrAmplMul(distr);
    }

    return result;
}